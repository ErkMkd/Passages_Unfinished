/*
		Compatible ATI - 3 sources
		Eclairage phong - Fragment shader

*/

uniform int drapeaux_sources;

varying vec3 direction_sommet_oeil;
varying vec3 directions_sources[8];
varying float distances_sources[8];
varying vec3 normale_face;

void main( void )
{
	vec3 normale=normalize(normale_face);
	vec3 direction_oeil_unitaire=normalize(direction_sommet_oeil);
	vec3 couleur_rgb=vec3(0.,0.,0.);
	vec3 couleur_speculaire=vec3 (0.,0.,0.);
	
	//----------Calcul des sources lumineuses:
	
	vec3 direction_source_unitaire;
	float angle_source_normale;
	vec3 reflet_source;
	float attenuation;
	vec3 couleur_ambiante;
	vec3 couleur_diffuse;
	
	//for (int n=0; n<gl_MaxLights;n++)
	//{
		if ( drapeaux_sources & 0x1 )
		{
			direction_source_unitaire		= normalize(directions_sources[0]);
			angle_source_normale 		 	= max(dot(normale,direction_source_unitaire),0.);
			reflet_source					= normalize(direction_oeil_unitaire+direction_source_unitaire);
					
			//Composantes:
			
			attenuation		=	1./ (gl_LightSource[0].constantAttenuation 
										+ gl_LightSource[0].linearAttenuation * distances_sources[0]
										+  distances_sources[0] * distances_sources[0] * gl_LightSource[0].quadraticAttenuation);
		
			couleur_ambiante   	= 	gl_FrontMaterial.ambient.rgb*gl_LightSource[0].ambient.rgb;
	   
			couleur_diffuse 	= 	gl_LightSource[0].diffuse.rgb * gl_FrontMaterial.diffuse.rgb * angle_source_normale;
			
			couleur_rgb				+=	attenuation * (couleur_ambiante + couleur_diffuse);
			
			if (angle_source_normale>0.)
			{
				couleur_speculaire 	+= attenuation* (
														gl_LightSource[0].specular.rgb * gl_FrontMaterial.specular.rgb
														* pow(max(dot(reflet_source,normale),0.),gl_FrontMaterial.shininess)
													);
			}
		}
	//}
	//for (int n=0; n<gl_MaxLights;n++)
	//{
		if ( drapeaux_sources & 0x2 )
		{
			direction_source_unitaire		= normalize(directions_sources[1]);
			angle_source_normale 		 	= max(dot(normale,direction_source_unitaire),0.);
			reflet_source					= normalize(direction_oeil_unitaire+direction_source_unitaire);
					
			//Composantes:
			
			attenuation		=	1./ (gl_LightSource[1].constantAttenuation 
										+ gl_LightSource[1].linearAttenuation * distances_sources[1]
										+  distances_sources[1] * distances_sources[1] * gl_LightSource[1].quadraticAttenuation);
		
			couleur_ambiante   	= 	gl_FrontMaterial.ambient.rgb*gl_LightSource[1].ambient.rgb;
	   
			couleur_diffuse 	= 	gl_LightSource[1].diffuse.rgb * gl_FrontMaterial.diffuse.rgb * angle_source_normale;
			
			couleur_rgb				+=	attenuation * (couleur_ambiante + couleur_diffuse);
			
			if (angle_source_normale>0.)
			{
				couleur_speculaire 	+= attenuation* (
														gl_LightSource[1].specular.rgb * gl_FrontMaterial.specular.rgb
														* pow(max(dot(reflet_source,normale),0.),gl_FrontMaterial.shininess)
													);
			}
		}
	//}
	//for (int n=0; n<gl_MaxLights;n++)
	//{
		if ( drapeaux_sources & 0x4 )
		{
			direction_source_unitaire		= normalize(directions_sources[2]);
			angle_source_normale 		 	= max(dot(normale,direction_source_unitaire),0.);
			reflet_source					= normalize(direction_oeil_unitaire+direction_source_unitaire);
					
			//Composantes:
			
			attenuation		=	1./ (gl_LightSource[2].constantAttenuation 
										+ gl_LightSource[2].linearAttenuation * distances_sources[2]
										+  distances_sources[2] * distances_sources[2] * gl_LightSource[2].quadraticAttenuation);
		
			couleur_ambiante   	= 	gl_FrontMaterial.ambient.rgb*gl_LightSource[2].ambient.rgb;
	   
			couleur_diffuse 	= 	gl_LightSource[2].diffuse.rgb * gl_FrontMaterial.diffuse.rgb * angle_source_normale;
			
			couleur_rgb				+=	attenuation * (couleur_ambiante + couleur_diffuse);
			
			if (angle_source_normale>0.)
			{
				couleur_speculaire 	+= attenuation* (
														gl_LightSource[2].specular.rgb * gl_FrontMaterial.specular.rgb
														* pow(max(dot(reflet_source,normale),0.),gl_FrontMaterial.shininess)
													);
			}
		}
	//}
	vec3 couleur_ambiante_globale = gl_FrontMaterial.ambient.rgb*gl_LightModel.ambient.rgb;
	vec4 couleur=vec4(gl_FrontMaterial.emission.rgb + couleur_ambiante_globale + couleur_rgb , gl_FrontMaterial.diffuse.a);	
    gl_FragColor =  clamp(vec4(couleur_speculaire,0.) + couleur,0.,1.);
}