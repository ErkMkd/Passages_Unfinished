/*

		Compatible ATI - 3 sources lumineuses
		Ondes aqueuses avec éclairage - Fragment shader

*/

uniform sampler2D texture_bruit;
uniform float quantite_ondes;
uniform float frequence_ondes;
uniform float amplitude_ondes;
uniform float niveau_perturbations_ondes;


uniform float intensite_ondes;
uniform float vitesse_ondes;
uniform float position_temps;
uniform int drapeaux_sources;

varying vec3 tangente_sommet;
varying vec3 binormale_sommet;
varying vec2 position_sommet_2d;
varying vec2 texture_bruit_coord;

varying vec3 direction_sommet_oeil;
varying vec3 directions_sources[4];
varying float distances_sources[4];
varying vec3 normale_face;

void main( void )
{
	//Calcul de la normale:
	float pas=vitesse_ondes*quantite_ondes*position_temps;
	
	float perturbation=niveau_perturbations_ondes*(texture2D(texture_bruit,texture_bruit_coord)*2.-1.);
	//float perturbation=(texture2D(texture_bruit,texture_bruit_coord));
	
	vec3 normale=normalize(normale_face);
	
	normale+=normalize(tangente_sommet)
				*cos(
						position_sommet_2d.x*quantite_ondes+perturbation
						+cos(position_sommet_2d.y*frequence_ondes)*(amplitude_ondes*quantite_ondes)
						+pas
					)*intensite_ondes;
	
	//normale+=normalize(binormale_sommet)*perturbation*intensite_ondes/quantite_ondes;
	
	
	normale+=normalize(binormale_sommet)
				*sin(
						position_sommet_2d.y*quantite_ondes+perturbation
						+sin(position_sommet_2d.x*frequence_ondes)*(amplitude_ondes*quantite_ondes)
						+pas
					)*intensite_ondes/4.;
	
	normale=normalize(normale);
	
	
	
	//Calcul des éclairages:
	vec3 direction_oeil_unitaire=normalize(direction_sommet_oeil);
	vec3 couleur_rgb=vec3(0.,0.,0.);
	vec3 couleur_speculaire=vec3 (0.,0.,0.);
	
	vec3 direction_source_unitaire;
	float angle_source_normale;
	vec3 reflet_source;
	float attenuation;
	vec3 couleur_ambiante;
	vec3 couleur_diffuse;
	
		if ( drapeaux_sources & 0x1 )
		{
			direction_source_unitaire	= normalize(directions_sources[0]);
			angle_source_normale  		= max(dot(normale,direction_source_unitaire),0.);
			reflet_source				= normalize(direction_oeil_unitaire+direction_source_unitaire);
					
			//Composantes:
			
			attenuation			=	1./ (gl_LightSource[0].constantAttenuation 
										+ gl_LightSource[0].linearAttenuation * distances_sources[0]
										+  distances_sources[0] * distances_sources[0] * gl_LightSource[0].quadraticAttenuation);
		
			couleur_ambiante   	= 	gl_FrontMaterial.ambient.rgb*gl_LightSource[0].ambient.rgb;
	   
			couleur_diffuse 	= 	gl_LightSource[0].diffuse.rgb * gl_FrontMaterial.diffuse.rgb * angle_source_normale;
			
			couleur_rgb			+=	attenuation * (couleur_ambiante + couleur_diffuse);
			if (angle_source_normale>0.)
			{
				couleur_speculaire 	+= attenuation* (
														gl_LightSource[0].specular.rgb * gl_FrontMaterial.specular.rgb
														* pow(max(dot(reflet_source,normale),0.),gl_FrontMaterial.shininess)
													);
			}
		}
		if ( drapeaux_sources & 0x2 )
		{
			direction_source_unitaire	= normalize(directions_sources[1]);
			angle_source_normale  		= max(dot(normale,direction_source_unitaire),0.);
			reflet_source				= normalize(direction_oeil_unitaire+direction_source_unitaire);
					
			//Composantes:
			
			attenuation			=	1./ (gl_LightSource[1].constantAttenuation 
										+ gl_LightSource[1].linearAttenuation * distances_sources[1]
										+  distances_sources[1] * distances_sources[1] * gl_LightSource[1].quadraticAttenuation);
		
			couleur_ambiante   	= 	gl_FrontMaterial.ambient.rgb*gl_LightSource[1].ambient.rgb;
	   
			couleur_diffuse 	= 	gl_LightSource[1].diffuse.rgb * gl_FrontMaterial.diffuse.rgb * angle_source_normale;
			
			couleur_rgb			+=	attenuation * (couleur_ambiante + couleur_diffuse);
			if (angle_source_normale>0.)
			{
				couleur_speculaire 	+= attenuation* (
														gl_LightSource[1].specular.rgb * gl_FrontMaterial.specular.rgb
														* pow(max(dot(reflet_source,normale),0.),gl_FrontMaterial.shininess)
													);
			}
		}
		
		if ( drapeaux_sources & 0x4 )
		{
			direction_source_unitaire	= normalize(directions_sources[2]);
			angle_source_normale  		= max(dot(normale,direction_source_unitaire),0.);
			reflet_source				= normalize(direction_oeil_unitaire+direction_source_unitaire);
					
			//Composantes:
			
			attenuation			=	1./ (gl_LightSource[2].constantAttenuation 
										+ gl_LightSource[2].linearAttenuation * distances_sources[2]
										+  distances_sources[2] * distances_sources[2] * gl_LightSource[2].quadraticAttenuation);
		
			couleur_ambiante   	= 	gl_FrontMaterial.ambient.rgb*gl_LightSource[2].ambient.rgb;
	   
			couleur_diffuse 	= 	gl_LightSource[2].diffuse.rgb * gl_FrontMaterial.diffuse.rgb * angle_source_normale;
			
			couleur_rgb			+=	attenuation * (couleur_ambiante + couleur_diffuse);
			if (angle_source_normale>0.)
			{
				couleur_speculaire 	+= attenuation* (
														gl_LightSource[2].specular.rgb * gl_FrontMaterial.specular.rgb
														* pow(max(dot(reflet_source,normale),0.),gl_FrontMaterial.shininess)
													);
			}
		}
	
	vec3 couleur_ambiante_globale = gl_FrontMaterial.ambient.rgb*gl_LightModel.ambient.rgb;
	vec4 couleur=vec4(gl_FrontMaterial.emission.rgb + couleur_ambiante_globale + couleur_rgb , gl_FrontMaterial.diffuse.a);	
    gl_FragColor = clamp((vec4(couleur_speculaire,0.) + couleur),0.,1.);
}