//======================================================================
//				Transition entre deux textures de couleur,
//				le long de l'axe Z du volume
//				Vertex shader
//======================================================================

//Données d'éclairage:
uniform int drapeaux_sources;	//Les bits d'activation des sources lumineuses

varying vec4 couleur;
varying vec3 couleur_speculaire; //Spérarée pour apparaître par dessus les textures

// Données de transition:
uniform float zmin;
uniform float zmax;

uniform int drapeaux_textures;

varying vec2 coordonnees_texture_depart;
varying vec2 coordonnees_texture_destination;
varying float position_axe; //Varie de 0 à 1

void main( void )
{
	//----------Calculs pour la transition de textures:
    gl_Position =  gl_ModelViewProjectionMatrix * gl_Vertex;
	position_axe=(gl_Vertex.z-zmin)/(zmax-zmin);
	
	if(drapeaux_textures&&0x1) coordonnees_texture_depart     	= gl_MultiTexCoord0.xy;
	if(drapeaux_textures&&0x2) coordonnees_texture_destination   = gl_MultiTexCoord1.xy;
	
	//------------ Eclairage:
	
			//Données de l'observateur:
			vec3 position_sommet = (gl_ModelViewMatrix * gl_Vertex).xyz;
			vec3 normale 				= gl_NormalMatrix * gl_Normal;
			vec3 direction_oeil 	= -normalize(position_sommet);
			
			//Sources lumineuses:
			couleur_speculaire=vec3 (0.,0.,0.);
			vec3 couleur_rgb=vec3(0.,0.,0.);
			vec3 couleur_ambiante_globale = gl_FrontMaterial.ambient.rgb*gl_LightModel.ambient.rgb;
			
			for(int n=0;n<gl_MaxLights;n++)
			{
				if ( !(drapeaux_sources & (1<<n)) ) continue;
				
				vec3 position_source 		= (gl_LightSource[n].position).xyz;
				vec3 direction_source 		= position_source-position_sommet;
				float distance_source 		= length(direction_source);
				direction_source			= normalize(direction_source);
				float angle_source_normale  = max(dot(normale,direction_source),0.);
				vec3 reflet_source			= normalize(direction_oeil+direction_source);
				
				
				//Composantes:
			
				float attenuation		=	1./ (gl_LightSource[n].constantAttenuation 
											+ gl_LightSource[n].linearAttenuation * distance_source
											+  distance_source * distance_source * gl_LightSource[n].quadraticAttenuation);
			
				vec3 couleur_ambiante   = 	gl_FrontMaterial.ambient.rgb*gl_LightSource[n].ambient.rgb;
		   
				vec3 couleur_diffuse 	= 	gl_LightSource[n].diffuse.rgb * gl_FrontMaterial.diffuse.rgb * angle_source_normale;
				
				couleur_rgb				+=	attenuation * (couleur_ambiante + couleur_diffuse);
			
				if (angle_source_normale>0.)
				{
					couleur_speculaire 	+= attenuation* (
															gl_LightSource[n].specular.rgb * gl_FrontMaterial.specular.rgb
															* pow(max(dot(reflet_source,normale),0.),gl_FrontMaterial.shininess)
														);
				}
				
			}
		
		//----------- Couleur de base:
		couleur=vec4(gl_FrontMaterial.emission.rgb + couleur_ambiante_globale + couleur_rgb , gl_FrontMaterial.diffuse.a);	
}