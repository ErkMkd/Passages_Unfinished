/************************************************************************************************************

		Rendu avec réflexion du cube d'arrière-plan

**************************************************************************************************************/
uniform int drapeaux_sources;	//Les bits d'activation des sources lumineuses
varying vec4 couleur;
varying vec3 couleur_speculaire; //Spérarée pour apparaître par dessus les textures

uniform mat4 matrice_volume;	//Pour avoir les coordonnées du sommet dans l'espace absolu
uniform vec3 position_oeil;
varying vec3 vecteur_reflet;

void main( void )
{
	gl_Position =  gl_ModelViewProjectionMatrix * gl_Vertex;
	//---------- Réflexion --------------------
	vec3 position_volume=vec3(matrice_volume[3][0],matrice_volume[3][1],matrice_volume[3][2]);
	vec3 position_sommet=(matrice_volume*gl_Vertex).xyz;
	vec3 normale_absolue = (matrice_volume * vec4(gl_Normal,1.)).xyz-position_volume;
	vecteur_reflet=reflect(position_sommet-position_oeil,normale_absolue);
	
	
	//--------- Eclairages ------------------
	
	//Données de l'observateur:
	position_sommet=(gl_ModelViewMatrix*gl_Vertex).xyz;
    vec3 normale 				= gl_NormalMatrix * gl_Normal;
	vec3 direction_oeil 	= -normalize(position_sommet);
	
	// Calcul des sources:
			
			couleur_speculaire=vec3 (0.,0.,0.);
			vec3 couleur_rgb=vec3(0.,0.,0.);
			
			for(int n=0;n<gl_MaxLights;n++)
			{
				if ( !(drapeaux_sources & (1<<n)) ) continue;
				
				vec3 position_source 		= (gl_LightSource[n].position).xyz;
				vec3 direction_source 		= position_source-position_sommet;
				float distance_source 		= length(direction_source);
				direction_source		= normalize(direction_source);
				vec3 reflet_source			= normalize(direction_oeil+direction_source);
				
				//Composantes:
			
				float attenuation		=	1./ (gl_LightSource[n].constantAttenuation 
											+ gl_LightSource[n].linearAttenuation * distance_source
											+  distance_source * distance_source * gl_LightSource[n].quadraticAttenuation);
			
				vec3 couleur_ambiante   = 	gl_FrontMaterial.ambient.rgb*gl_LightSource[n].ambient.rgb;
		   
				vec3 couleur_diffuse 	= 	gl_LightSource[n].diffuse.rgb * gl_FrontMaterial.diffuse.rgb
											* max(dot(normale,direction_source),0.);
				
				couleur_rgb				+=	attenuation * (couleur_ambiante + couleur_diffuse);
			
				couleur_speculaire 	+= attenuation* (
														gl_LightSource[n].specular.rgb * gl_FrontMaterial.specular.rgb
														* pow(max(dot(reflet_source,normale),0.),gl_FrontMaterial.shininess)
													);
				
			}
		
		//----------- Couleur de base:
		vec3 couleur_ambiante_globale = gl_FrontMaterial.ambient.rgb*gl_LightModel.ambient.rgb;
		couleur=vec4(gl_FrontMaterial.emission.rgb + couleur_ambiante_globale + couleur_rgb , gl_FrontMaterial.diffuse.a);		
}