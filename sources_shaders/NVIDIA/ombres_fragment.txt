/*
		Affichage des ombres portées, rendu sans texture (autre que la texture de profondeur)
*/

//------------- Données de gestion des ombres:

uniform sampler2D texture_profondeur;		//Unité de texture 0
uniform float composantes_convertion[2];		//Les composantes de la matrice de projection de la source, utilisées pour la convertion de profondeur
uniform float seuil_ombres;	//Pour éviter les trop grandes razances qui étirent la texture de profondeur, je défini un seuil: seuil_ombres=cos(angle_max) - angle en radians
uniform float intensite_ombres;

varying vec4 coordonnees_texture_ombres;
varying float distance_source_des_ombres;

//------------- Données de gestion de l'éclairage:
varying vec4 couleur;
varying vec3 couleur_speculaire;
varying vec3 couleur_source_des_ombres;
varying vec3 couleur_speculaire_source_des_ombres;

varying vec3 direction_source_des_ombres;
varying vec3 normale;

void main(void)
{
	//float facteur_attenuation_ombres=0.1;
	
	//---------- Calcul ombre:
		//Test si la face est dans le bon sens:
		
		if (dot(normalize(direction_source_des_ombres),normalize(normale))>seuil_ombres)
		{
			//Test de dépassement du champ de vision de la source des ombres:
			float cx=coordonnees_texture_ombres.x/coordonnees_texture_ombres.w;
			float cy=coordonnees_texture_ombres.y/coordonnees_texture_ombres.w;
			if ( cx>1. || cx<0. || cy>1. || cy<0.)
			{
				couleur_speculaire+=couleur_speculaire_source_des_ombres;
				couleur+=vec4(couleur_source_des_ombres,0.);
			}
			//Projection des ombres:
			else
			{
				float distance_zBuf = textureProj( texture_profondeur, coordonnees_texture_ombres);
				
				//Conversion Zbuffer->Ze:
				float Zndc = distance_zBuf*2.-1.;
				float distance_proche = composantes_convertion[0]/(Zndc+composantes_convertion[1]);
				
				//Test de distance:

				if ( (distance_proche+0.05) >= (distance_source_des_ombres)) //Voir à faire une distance minimum test réglable
				{
					couleur_speculaire+=couleur_speculaire_source_des_ombres;
					couleur+=vec4(couleur_source_des_ombres,0.);
				}
				
				//Ombre avec intensité réglable:
				else
				{
					couleur_speculaire+=(1.-intensite_ombres)*couleur_speculaire_source_des_ombres;
					couleur+=vec4(couleur_source_des_ombres*(1.-intensite_ombres),0.);
				}
				
				
				//Atténuation de l'ombre en fonction de la distance:
				
				//else
				//{
				//	couleur+=vec4(	clamp(facteur_attenuation_ombres
				//					*(distance_source_des_ombres-distance_proche),0.,1.)
				//					*couleur_source_des_ombres,0.);
				//}
				
			}
			
		}
	
		
	//------- Détermine la couleur:
			gl_FragColor =  clamp(vec4(couleur_speculaire,0.) + couleur,0.,1.);
			//gl_FragColor=vec4(1.,0.,0.,1.);
}